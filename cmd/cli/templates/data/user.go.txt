package data

import (
	"errors"
	"time"

	"golang.org/x/crypto/bcrypt"

	"github.com/s-petr/celeritas"
	up "github.com/upper/db/v4"
)

type User struct {
	ID        int       `db:"id,omitempty"`
	FirstName string    `db:"first_name"`
	LastName  string    `db:"last_name"`
	Email     string    `db:"email"`
	Active    int       `db:"user_active"`
	Password  string    `db:"password"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
	Token     Token     `db:"-"`
}

func (u *User) Table() string {
	return "users"
}

func (u *User) Validate(validator *celeritas.Validation) {
	validator.Check(u.FirstName != "", "first_name", "First name cannot be empty")
	validator.Check(u.LastName != "", "last_name", "Last name cannot be empty")
	validator.Check(u.Email != "", "email", "Email cannot be empty")
	validator.IsEmail("email", u.Email)
}

func (u *User) GetAll() ([]*User, error) {
	collection := upper.Collection(u.Table())

	var all []*User

	res := collection.Find().OrderBy("last_name")
	if err := res.All(&all); err != nil {
		return nil, err
	}

	return all, nil
}

func (u *User) GetByEmail(email string) (*User, error) {
	var foundUser User

	collection := upper.Collection(u.Table())
	res := collection.Find(up.Cond{"email =": email})

	if err := res.One(&foundUser); err != nil {
		return nil, err
	}

	var token Token
	collection = upper.Collection(token.Table())
	res = collection.Find(up.Cond{"user_id =": foundUser.ID,
		"expiry >": time.Now()}).OrderBy("created_at desc")
	if err := res.One(&token); err != nil &&
		err != up.ErrNilRecord &&
		err != up.ErrNoMoreRows {
		return nil, err
	}

	foundUser.Token = token

	return &foundUser, nil
}

func (u *User) Get(id int) (*User, error) {
	var foundUser User

	collection := upper.Collection(u.Table())
	res := collection.Find(up.Cond{"id =": id})

	if err := res.One(&foundUser); err != nil {
		return nil, err
	}

	var token Token
	collection = upper.Collection(token.Table())
	res = collection.Find(up.Cond{"user_id =": id,
		"expiry >": time.Now()}).OrderBy("created_at desc")
	if err := res.One(&token); err != nil &&
		err != up.ErrNilRecord &&
		err != up.ErrNoMoreRows {
		return nil, err
	}

	foundUser.Token = token

	return &foundUser, nil
}

func (u *User) Update(user User) error {
	user.UpdatedAt = time.Now()

	collection := upper.Collection(u.Table())
	res := collection.Find(user.ID)

	return res.Update(&user)
}

func (u *User) Delete(id int) error {
	collection := upper.Collection(u.Table())
	res := collection.Find(up.Cond{"id =": id})
	return res.Delete()
}

func (u *User) Insert(user User) (int, error) {
	newHash, err := bcrypt.GenerateFromPassword([]byte(user.Password), 12)
	if err != nil {
		return 0, err
	}

	user.CreatedAt = time.Now()
	user.UpdatedAt = time.Now()
	user.Password = string(newHash)

	collection := upper.Collection(u.Table())
	if res, err := collection.Insert(user); err != nil {
		return 0, err
	} else {
		return getInsertID(res.ID()), nil
	}

}

func (u *User) ResetPassword(id int, password string) error {
	newHash, err := bcrypt.GenerateFromPassword([]byte(password), 12)
	if err != nil {
		return err
	}

	foundUser, err := u.Get(id)
	if err != nil {
		return err
	}

	u.Password = string(newHash)

	return foundUser.Update(*u)
}

func (u *User) PasswordMatches(plainText string) (bool, error) {
	err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(plainText))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}

func (u *User) CheckForRememberToken(id int, token string) bool {
	var rememberToken RememberToken
	rt := RememberToken{}
	collection := upper.Collection(rt.Table())
	res := collection.Find(up.Cond{"user_id": id, "remember_token": token})
	err := res.One(&rememberToken)
	return err == nil
}
